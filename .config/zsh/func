#!/usr/bin/env bash

# render blender animations from $2 frame to $3 frame, taking a break for $4 seconds every 50 frames.
brend(){
    if [[ ! -f $1 ]]; then
        echo "FILE NOT FOUND!"
        return
    fi
    
    if [[ -z $2 ]]; then
        blender -b $1 -f 1
        return
    fi

    if [[ -z $3 ]]; then
        echo "----- Provide an end frame -----"
        return
    fi

    if [[ -z $4 ]]; then
        echo "----- Provide break time in seconds -----"
        return
    fi

    if [[ -z $5 ]]; then
        echo "----- Provide number of frames the break should be taken after -----"
        return
    fi

    brk=0
    for frame in {$2..$3}
    do
        ((brk++))
        echo "----- $frame -----"
        blender -b $1 -f $frame


        if  ((brk%$5 == 0)); then
            echo "----- Taking a break -----"
            sleep $4
        fi
    done
}

# compress image $1 (after replacing " " with "-")
comwebp(){
    filename=$(basename -- $1 | sed 's/ /\-/g')
    filename="${filename%.*}" # remove extension at the end | abc.png -> abc

    echo "$1   ->   $filename.webp"
    cwebp -near_lossless 16 -mt -quiet $1 -o $filename.webp
}

cocYarnInstall() {
    cwd=$(pwd)
    echo "exiting $green$bold$italic$cwd\n$normal" &&
    cd .local/share/nvim/site/pack/packer/start/coc.nvim &&
    yarn install &&
    cd $cwdForCoc &&
    echo "\nentering $green$bold$italic$cwd$normal" &&
}

gacp(){
	if [[ "$1" == "" ]]
	then
		echo "enter a message..."
        return
	else
		git add .
		git commit -m "$1"
		git push
	fi
}

cn(){
	if [[ $1 == "cf" ]]
	then
		if [ -f ~/Developer/CP/codeforces/$2.cpp ];then
			subl ~/Develope/CP/codeforces/$2.cpp
		else
			touch ~/Developer/CP/codeforces/$2.cpp
			cp ~/Developer/CP/template.cpp ~/Developer/CP/codeforces/$2.cpp
			cd codeforces
			nvim $2.cpp
		fi
	fi

	if [[ $1 == "lc" ]]
	then
		if [ -f ~/Developer/CP/leetcode/$2.cpp ];then
			subl ~/Developer/CP/leetcode/$2.cpp
		else
			touch ~/Developer/CP/leetcode/$2.cpp
			cp ~/Developer/CP/template.cpp ~/Developer/CP/leetcode/$2.cpp
			cd leetcode
			nvim $2.cpp
		fi
	fi
	if [[ $1 == "at" ]] then
		if [ -f ~/Developer/CP/atcoder/$2.cpp ]; then
			subl ~/Developer/CP/atcoder/$2.cpp
		else
			touch ~/Developer/CP/atcoder/$2.cpp
			cp ~/Developer/CP/template.cpp ~/Developer/CP/atcoder/$2.cpp
			cd atcoder
			nvim $2.cpp
		fi
	fi
}

g++(){
	g++-10 -std=c++17 -O2 -Wall $1 && ./a.out && rm -rf a.out
}

mkcd(){
	mkdir $1 && cd $1
}

remove_ds(){
    find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
}

opnssl_enc(){
        openssl enc -aes-256-cbc -e -in $1 -out $2
}
opnssl_dec(){
        openssl enc -aes-256-cbc -d -in $1 -out $2
}

ytdl_best_mp3(){
    yt-dlp -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1
}


# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		rm $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}

