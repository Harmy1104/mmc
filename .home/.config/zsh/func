#!/usr/bin/env bash

print_colors(){
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mThe quick brown fox jumps over the lazy dog : ${i}\x1b[0m\n"
    done
}

# render blender animations from $2 frame to $3 frame, taking a break for $4 seconds every 50 frames.
brend(){
    if [[ ! -f $1 ]]; then
        echo "FILE NOT FOUND!"
        return
    fi
    
    if [[ -z $2 ]]; then
        blender -b $1 -f 1
        return
    fi

    if [[ -z $3 ]]; then
        echo "----- Provide an end frame -----"
        return
    fi

    if [[ -z $4 ]]; then
        echo "----- Provide break time in seconds -----"
        return
    fi

    if [[ -z $5 ]]; then
        echo "----- Provide number of frames the break should be taken after -----"
        return
    fi

    brk=0
    for frame in {$2..$3}
    do
        ((brk++))
        echo "----- $frame -----"
        blender -b $1 -f $frame


        if  ((brk%$5 == 0)); then
            echo "----- Taking a break -----"
            sleep $4
        fi
    done
}

# compress image $1 (after replacing " " with "-")
comwebp(){
    filename=$(basename -- $1 | sed 's/ /\-/g')
    filename="${filename%.*}" # remove extension at the end | abc.png -> abc

    echo "$1   ->   $filename.webp"
    cwebp -near_lossless 16 -mt -quiet $1 -o $filename.webp
}

cocYarnInstall() {
    cwd=$(pwd)
    echo "exiting $green$bold$italic$cwd\n$normal" &&
    cd .local/share/nvim/site/pack/packer/start/coc.nvim &&
    yarn install &&
    cd $cwdForCoc &&
    echo "\nentering $green$bold$italic$cwd$normal" &&
}

# git
gacp(){
	if [[ "$1" == "" ]]
	then
		echo "enter a message..."
        return
	else
		git add .
		git commit -m "$1"
		git push
	fi
}

# leetcode stuff
cn(){
	if [[ $1 == "cf" ]]
	then
		if [ -f ~/Developer/CP/codeforces/$2.cpp ];then
			subl ~/Develope/CP/codeforces/$2.cpp
		else
			touch ~/Developer/CP/codeforces/$2.cpp
			cp ~/Developer/CP/template.cpp ~/Developer/CP/codeforces/$2.cpp
			cd codeforces
			nvim $2.cpp
		fi
	fi

	if [[ $1 == "lc" ]]
	then
		if [ -f ~/Developer/CP/leetcode/$2.cpp ];then
			subl ~/Developer/CP/leetcode/$2.cpp
		else
			touch ~/Developer/CP/leetcode/$2.cpp
			cp ~/Developer/CP/template.cpp ~/Developer/CP/leetcode/$2.cpp
			cd leetcode
			nvim $2.cpp
		fi
	fi
	if [[ $1 == "at" ]] then
		if [ -f ~/Developer/CP/atcoder/$2.cpp ]; then
			subl ~/Developer/CP/atcoder/$2.cpp
		else
			touch ~/Developer/CP/atcoder/$2.cpp
			cp ~/Developer/CP/template.cpp ~/Developer/CP/atcoder/$2.cpp
			cd atcoder
			nvim $2.cpp
		fi
	fi
}

g++(){
	g++-10 -std=c++17 -O2 -Wall $1 && ./a.out && rm -rf a.out
}

mkcd(){
	mkdir $1 && cd $1
}

remove_ds(){
    find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
}

opnssl_enc(){
        openssl enc -aes-256-cbc -e -in $1 -out $2
}
opnssl_dec(){
        openssl enc -aes-256-cbc -d -in $1 -out $2
}

gcd(){
    local ans
    if [[ $# == 2 ]] then
        (([[ $1 == 0 ]] && echo $2) || ([[ $2 == 0 ]] && echo $1)) && return

        ans=$(gcd $2 $(( $1 % $2 )))
    else
        local ans=$1
        for i in {2..$#}
        do
            ans=$(gcd $ans $@[$i])
        done
    fi
    echo $ans
}

lcm(){
    ans=$1
    for i in {2..$#}
    do
        ab=$(( $ans * $@[$i] ))
        ans=$(( $ab / $(gcd $ans $@[$i]) ))
    done
    echo $ans
}
